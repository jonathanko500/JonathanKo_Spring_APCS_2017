<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Tom Schindl: Friday fun stuff – JavaFX Based Java IDE</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=4976</guid>
	<link>https://tomsondev.bestsolution.at/2017/03/04/friday-fun-stuff-javafx-based-java-ide/</link>
	<description>&lt;p&gt;While I’ve been working (and still work) on general IDE concept and frameworks I decided to today that I want to work on something simpler. &lt;/p&gt;
&lt;p&gt;After having hacked the whole day I have now a basic Java IDE:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tomsondev.bestsolution.at/2017/03/04/friday-fun-stuff-javafx-based-java-ide/screen-light/&quot; rel=&quot;attachment wp-att-4978&quot;&gt;&lt;img alt=&quot;screen-light&quot; class=&quot;alignnone size-full wp-image-4978&quot; height=&quot;405&quot; src=&quot;https://tomsondev.files.wordpress.com/2017/03/screen-light.png?w=640&amp;amp;h=405&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tomsondev.bestsolution.at/2017/03/04/friday-fun-stuff-javafx-based-java-ide/screen-dark/&quot; rel=&quot;attachment wp-att-4979&quot;&gt;&lt;img alt=&quot;screen-dark&quot; class=&quot;alignnone size-full wp-image-4979&quot; height=&quot;405&quot; src=&quot;https://tomsondev.files.wordpress.com/2017/03/screen-dark.png?w=640&amp;amp;h=405&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nothing fancy but something I can built upon next Friday … .&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/tomsondev.wordpress.com/4976/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tomsondev.wordpress.com/4976/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=tomsondev.bestsolution.at&amp;amp;blog=7995503&amp;amp;post=4976&amp;amp;subd=tomsondev&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 04 Mar 2017 00:53:58 +0000</pubDate>
</item>
<item>
	<title>Geniutec: Angular 4 Is Coming!</title>
	<guid isPermaLink="false">https://www.genuitec.com/?p=514283</guid>
	<link>https://www.genuitec.com/angular-4/</link>
	<description>&lt;p&gt;Good news for Angular 2 users — Angular 4, a backwards compatible upgrade, is around the corner!  It will offer further improvements without rewriting the entire framework, as was the case with Angular 2 in the switch from the first version (Minar, I.).  The main change has to do with alteration in certain core libraries […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.genuitec.com/angular-4/&quot; rel=&quot;nofollow&quot;&gt;Angular 4 Is Coming!&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.genuitec.com&quot; rel=&quot;nofollow&quot;&gt;Genuitec&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 03 Mar 2017 19:30:02 +0000</pubDate>
</item>
<item>
	<title>Thea Aldrich: Do you want to attend Devoxx US but need some help getting here? Apply for a Devoxx US Community Bursary</title>
	<guid isPermaLink="false">http://theaaaaaa.wordpress.com/?p=42</guid>
	<link>https://theaaaaaa.wordpress.com/2017/03/03/do-you-want-to-attend-devoxx-us-but-need-some-help-getting-here-apply-for-a-devoxx-us-community-bursary/</link>
	<description>&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last month, I &lt;/span&gt;&lt;a href=&quot;https://theaaaaaa.wordpress.com/2017/01/24/diversity-at-eclipse/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;announced&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; an initiative focused on growing and supporting Eclipse open source projects and developers in communities all over the world. A large part of our effort to attract new community members this spring will be geared towards ensuring our conferences and meetups feature top technical content, from diverse perspectives, in a welcoming and inclusive environment. We are kicking this off by offering a Community Bursary for the inaugural &lt;/span&gt;&lt;a href=&quot;http://www.devoxx.us&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Devoxx US&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Conference on March 21-23 in San Jose, California.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;download&quot; class=&quot; size-full wp-image-47 alignright&quot; src=&quot;https://theaaaaaa.files.wordpress.com/2017/03/download.png?w=676&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Devoxx US features three  days of top developers talking about the hottest new technologies. It’s going to be an incredible event that will cover popular topics such as Angulare, Docker, Java 9, IoT and much more! However, we recognize that the costs associated with attending an event of this nature  are often too high for many people to justify, especially those who are self-funding their ticket. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So, on behalf of the entire Eclipse Foundation, I would like to welcome you to apply for the Devoxx US Community Bursary. Just send an email to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;mailto:registration@eclipse.org&quot;&gt;registration@devoxx.u&lt;/a&gt;s&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and in your email please include the following: &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A short bio of yourself&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A short explanation of why you should receive the bursary&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;An explanation of your current activities&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A brief explanation of what you hope to achieve by attending the event, including an overview of any specific aspects of the program from which you hope to learn&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;20160609_1248501&quot; class=&quot; size-full wp-image-51 alignleft&quot; src=&quot;https://theaaaaaa.files.wordpress.com/2017/03/20160609_1248501.jpg?w=676&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once approved, you’ll receive a free pass to the conference and to Eclipse Converge or Eclipse IOT Day. The bursary is open to anyone, but preference will be given to those who are either currently enrolled in full time studies, or are  members of an organization whose primary role is to help enhance the careers of developers from underrepresented communities. Be sure to get your application in today! You can find out more information about the Community Bursary &lt;a href=&quot;https://devoxx.us/devoxx-us-community-bursary/&quot;&gt;here.&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse staff and community members will be on hand all week to answer your questions, and to discuss ideas about how we can continue to build the premier open source professional community. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please visit &lt;/span&gt;&lt;a href=&quot;https://devoxx.us/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;www.devoxx.us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to view the full program with over 190 speakers, 200 sessions and  10 track topics.  Register for one of the best developer events this year. See you there!&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/theaaaaaa.wordpress.com/42/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/theaaaaaa.wordpress.com/42/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=theaaaaaa.wordpress.com&amp;amp;blog=123079642&amp;amp;post=42&amp;amp;subd=theaaaaaa&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 03 Mar 2017 17:16:19 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse IDE, Oxygen Edition; and Java 9</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4475</guid>
	<link>https://waynebeaton.wordpress.com/2017/03/02/eclipse-ide-oxygen-edition-and-java-9/</link>
	<description>&lt;p&gt;I’ll admit that I dropped the ball for a while, but I’m back to testing the Eclipse IDE with Java 9. Java 9 includes some pretty major changes, especially in the way that it restricts access to internal code, and so there’s a real risk that Java-based applications are going to break. Just confirming that the Eclipse IDE runs on Java 9 is a critical task (even before we talk about leveraging actual Java 9 features).&lt;/p&gt;
&lt;p&gt;Today, I downloaded the &lt;a href=&quot;https://jdk9.java.net/jigsaw/&quot;&gt;Java 9 Early Access&lt;/a&gt; Build 158 (March 1/2017) and reconfigured my working installation of the &lt;a href=&quot;https://www.eclipse.org/downloads/index-developer.php&quot;&gt;Eclipse IDE for RCP and RAP Developers&lt;/a&gt;, Oxygen Edition (M5) to use it. I’ve added a few extra features to my installation, including the &lt;a href=&quot;https://projects.eclipse.org/projects/tools.pdt&quot;&gt;PHP Development Tools&lt;/a&gt;, &lt;a href=&quot;https://projects.eclipse.org/projects/datatools&quot;&gt;Data Tools&lt;/a&gt; SQL Designer, &lt;a href=&quot;https://projects.eclipse.org/projects/mylyn.docs&quot;&gt;Mylyn WikiText&lt;/a&gt;, &lt;a href=&quot;https://projects.eclipse.org/projects/tools.tm&quot;&gt;TM Terminal&lt;/a&gt;, and a handy regular expression helper/tester that I found in the &lt;a href=&quot;https://marketplace.eclipse.org&quot;&gt;Eclipse Marketplace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Configuration is relatively straight forward. The nice thing about the early access builds is that you can just decompress them into a directory on your system without installing them (which will have a impact on your system’s configuration). The downside is that you have to configure your Eclipse IDE to find it. Actually, this isn’t really much of a downside in my opinion: I like to have &lt;em&gt;some degree&lt;/em&gt; of control over what Java  runtime I’m using to run the Eclipse IDE rather than just grabbing the system default.&lt;/p&gt;
&lt;p&gt;I decompressed the Java build and updated my &lt;code&gt;eclipse.ini&lt;/code&gt; file to point point to it:&lt;/p&gt;
&lt;pre&gt;...
-vm
/home/apps/jigsaw-jdk-9-ea+158_linux-x64_bin/jdk-9/bin/
-vmargs
--add-modules=java.se.ee
...&lt;/pre&gt;
&lt;p&gt;Note that you need to add the &lt;code&gt;--add-modules&lt;/code&gt; option to tell Java 9 to load some modules that it wouldn’t normally load by default. I’m hopeful that we’ll have an update to the launcher to automatically add this option in the M6 builds (see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=493761&quot;&gt;Bug 493761&lt;/a&gt;); with this launching the Eclipse IDE will &lt;em&gt;just work&lt;/em&gt; if you happen to have a Java 9 JVM installed as your system default.&lt;/p&gt;
&lt;p&gt;As a sanity check, I opened the &lt;em&gt;About Eclipse&lt;/em&gt; dialog and reviewed the &lt;em&gt;Configuration&lt;/em&gt; in the &lt;em&gt;Installation Details&lt;/em&gt; to confirm that I’m actually running on Java 9. The next step is to actually start writing some code that leverages Java 9 features; for that I’ll need to install the &lt;a href=&quot;https://marketplace.eclipse.org/content/java-9-support-beta-oxygen&quot;&gt;Java 9 Support (BETA) for Oxygen&lt;/a&gt; from the Eclipse Marketplace.&lt;/p&gt;
&lt;p&gt;I’m looking forward to learning a lot more about Java 9 at Devoxx US, including these sessions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/FLS-8924/55_New_Features_In_JDK_9&quot;&gt;55 New Features In JDK 9&lt;/a&gt; with &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/simon_ritter&quot; title=&quot;Simon Ritter&quot;&gt;Simon Ritter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/LNR-6629/A_Post-Apocalyptic_sun.misc.Unsafe_World&quot;&gt;A Post-Apocalyptic sun.misc.Unsafe World&lt;/a&gt; with &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/christoph_engelbert&quot; title=&quot;Christoph Engelbert&quot;&gt;Christoph Engelbert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/PPJ-6907/Anticipating_Java_9_-_Functionality_and_Tooling&quot;&gt;Anticipating Java 9 – Functionality and Tooling&lt;/a&gt; with &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/trisha_gee&quot; title=&quot;Trisha Gee&quot;&gt;Trisha Gee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/ELZ-0187/JDK_9_Language,_Tooling,_and_Library_Features&quot;&gt;JDK 9 Language, Tooling, and Library Features&lt;/a&gt; with &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/joe_darcy&quot; title=&quot;Joe Darcy&quot;&gt;Joe Darcy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/CCZ-6919/JShell:_An_Interactive_Shell_for_the_Java_Platform&quot;&gt;JShell: An Interactive Shell for the Java Platform&lt;/a&gt; with &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/robert_field&quot; title=&quot;Robert Field&quot;&gt;Robert Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/LVD-9400/Preparing_for_JDK_9_-_AKA_The_Sharp_Edges_of_JDK_9&quot;&gt;Preparing for JDK 9 – AKA The Sharp Edges of JDK 9&lt;/a&gt; with &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/aurelio_garcia-ribeyro&quot; title=&quot;Aurelio Garcia-Ribeyro&quot;&gt;Aurelio Garcia-Ribeyro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you at Devoxx!&lt;br /&gt;
&lt;img alt=&quot;devoxx_black_transparent400&quot; class=&quot;alignnone size-medium wp-image-4416 aligncenter&quot; height=&quot;104&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/02/devoxx_black_transparent400.png?w=300&amp;amp;h=104&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4475/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4475/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4475&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 02 Mar 2017 20:32:49 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus-RT Roadmap: follow the train</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=504</guid>
	<link>https://papyrusuml.wordpress.com/2017/03/02/papyrus-rt-train-roadmap/</link>
	<description>&lt;p&gt;Although the Papyrus for Real Time (Me-RT) project is not officially on the &lt;a href=&quot;https://wiki.eclipse.org/Simultaneous_Release&quot; target=&quot;_blank&quot;&gt;Eclipse Release Train&lt;/a&gt;,  that team has indicated, judged on their &lt;a href=&quot;https://wiki.eclipse.org/Papyrus-RT/Roadmap&quot; target=&quot;_blank&quot;&gt;newly published roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should be noted that it is through an initiative of the Papyrus Industry Consortium that  these roadmap will become the norm for all the Papyrus product line!&lt;/p&gt;
&lt;p&gt;This is a good thing as it should formalise the release schedule for all my variants!&lt;/p&gt;
&lt;p&gt;The Papyrus-RT roadmap has also shown us more details about the next two releases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Papyrus-RT v0.9 is to be released with Neon.3 in March&lt;/li&gt;
&lt;li&gt;Papyrus-RT v1.0 is to be released with Oxygen in early July&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From what I have been told, meeting these deadlines will be feasible, especially as the time between v0.9 and 1.0 will be spent cleaning up the offering for the 1.0 release, with no additional functionality.&lt;/p&gt;
&lt;p&gt;All the efforts around me continue to be so interesting!&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/&quot;&gt;Papyrus IC&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/release/&quot;&gt;release&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/roadmap/&quot;&gt;roadmap&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/504/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/504/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=504&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 02 Mar 2017 14:15:50 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: “Reactive Internet of Things : the Vert.x way” … meetup in Rome !</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=4114</guid>
	<link>https://paolopatierno.wordpress.com/2017/03/02/reactive-internet-of-things-the-vert-x-way-meetup-in-rome/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;vertx_iot&quot; class=&quot; size-full wp-image-3881 aligncenter&quot; src=&quot;https://paolopatierno.files.wordpress.com/2016/12/vertx_iot.png?w=620&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;March 16th&lt;/strong&gt; I’ll be guest of the &lt;a href=&quot;https://www.meetup.com/Meet-cast/&quot; target=&quot;_blank&quot;&gt;Meet{cast}&lt;/a&gt; and &lt;a href=&quot;http://www.codemotionworld.com/&quot; target=&quot;_blank&quot;&gt;Codemotion&lt;/a&gt; community for a meetup in &lt;strong&gt;Rome&lt;/strong&gt; speaking about … &lt;strong&gt;“Reactive Internet of Things : the Vert.x way”&lt;/strong&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;meetcast&quot; class=&quot;  wp-image-4138 aligncenter&quot; height=&quot;89&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/meetcast.png?w=247&amp;amp;h=89&quot; width=&quot;247&quot; /&gt;&lt;img alt=&quot;codemotion&quot; class=&quot;  wp-image-4140 aligncenter&quot; height=&quot;65&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/codemotion-e1488443393194.png?w=363&amp;amp;h=65&quot; width=&quot;363&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It’s a pleasure for me showing how the Vert.x toolkit can be used for developing Internet of Things solutions leveraging on the pillars of the reactive manifesto (responsive, elastic, resilient and asynchronous).&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Starting from an introduction on what Vert.x is, what it provides and its main features, I’ll move to the messaging and IoT focused components that the toolkit offers. So we’ll see the new &lt;strong&gt;MQTT server&lt;/strong&gt; and &lt;strong&gt;Kafka client&lt;/strong&gt; (officially in the latest 3.4.0 Beta 1 release) and the well know &lt;strong&gt;AMQP Proton and Bridge&lt;/strong&gt; components. Of course …. demos around them !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, I’ll show how these components are already used today for enterprise IoT solutions introducing the &lt;a href=&quot;https://www.eclipse.org/hono/&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; project, for handling IoT connectivity, and the &lt;a href=&quot;https://github.com/EnMasseProject&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt; which provides a Message as a Service platform. The great thing is that we’ll have the chance to see the code because … they are open source of course !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;So … what are you waiting for … register for the meetup &lt;a href=&quot;https://www.meetup.com/Meet-cast/events/238084770/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; ! See you in Rome &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/4114/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/4114/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=4114&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 02 Mar 2017 08:31:18 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Language Server Protocol Talks at Eclipse Converge and Devoxx US</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4445</guid>
	<link>https://waynebeaton.wordpress.com/2017/03/01/language-server-protocol-talks-at-eclipse-converge-and-devoxx-us/</link>
	<description>&lt;p&gt;I’m particularly interested in learning more about Language Server Protocol at the combined &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt; and &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt; conferences at the end of March. We have a handful of projects doing work on the topic, and the opportunity to connect directly with the developers doing the work is too good of an opportunity to miss.&lt;/p&gt;
&lt;p&gt;I’m hoping to fit the following talks into my schedule.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/language-server-protocol-explained&quot;&gt;Language Server Protocol Explained&lt;/a&gt;&lt;/h3&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/user/22&quot;&gt;Sven Efftinge&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;The Language Server Protocol (LSP) introduced by Microsoft’s VSCode team has been a hot topic recently. In a nutshell it is an effort to unify how editors communicate with advanced language tooling.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;In this session we want to give you an overview of what the LSP is, why it is so important and how you could leverage it. We will also explain what it does and what it doesn’t do, discuss some misconceptions and show some cool demos based on a Java implementation of the protocol.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/sneak-peek-spring-boot-language-server&quot;&gt;A sneak peek into the Spring Boot language server&lt;/a&gt;&lt;/h3&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/user/1899&quot;&gt;Martin Lippert&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;Based in the language server protocol and the architectural ideas behind it, big chunks of the Spring Boot tooling for Eclipse are currently re-implemented. This talk provides a sneak peek into the implementation and discusses the early experiences using this approach. We dive into the details and challenges how we implemented tooling for Spring Boot property files (pure properties + yaml), support for Cloud Foundry manifest files, and how we extracted and refactored existing Spring IDE code to run inside of a language server.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/building-jdt-language-server-and-how-can-you-build-one-your-own-feature&quot;&gt;Building the JDT Language Server and how can you build one from your own feature&lt;/a&gt;&lt;/h3&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/user/1953&quot;&gt;Gorkem Ercan&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;Eclipse JDT LS (Language Server) project aims to develop a Java Language Server that will make JDT features available to any client that supports the Language Server Protocol. This talk covers the changes, challenges and lessons learned while building the JDT LS. It will also provide insights to using and developing language servers and some tips to converting existing features. There will also be demos of JDT LS features on different editors and their comparision with the Eclipse JDT to give a better understanding of the possibilities and problems of language servers.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/roll-your-own-development-environment-eclipse-orion&quot;&gt;Roll your own Development Environment with Eclipse Orion&lt;/a&gt;&lt;/h3&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/user/93&quot;&gt;Bogdan Gheorghe&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;Eclipse Orion is a cloud IDE that supports JavaScript development out of the box.  Recently, support for LSP (Language Server Protocol) has been added to the mix.  Come and learn how to create three different development environments using Docker, Orion and LSP (Language Sever Protocol).&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/RYV-7617/Introduction_to_Eclipse_Che&quot;&gt;Introduction to Eclipse Che&lt;/a&gt;&lt;/h3&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/stevan_le_meur&quot;&gt;Stévan Le Meur&lt;/a&gt; and &lt;a href=&quot;http://cfp.devoxx.us/2017/speaker/florent_benoit&quot;&gt;Florent Benoit&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;Eclipse Che introduces a new kind of workspace that is composed of projects and runtimes. This approach improves agile workflow and allows fast bootstrapping of developers. Eclipse Che can run locally or in the cloud which allow to scale the resources on-demand and benefit from high performances and resources.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;In this session, we will explain how to setup a workspace cloud in Eclipse Che, how to create the environments using Docker, configure the tools that you need and register a set of commands to be executed in that workspace. We will show you how you can benefits from the workspace portability to easily share it onto another Che or to the cloud.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;This session will also cover how Eclipse Che is providing support and intellisense for all the languages and explain the work did on the Language Server Protocol. The Language Server Protocol is a communication protocol between a tool and a Language Server than run all code analysis and operations&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;&lt;img alt=&quot;Eclipse Converge&quot; border=&quot;0&quot; src=&quot;https://www.eclipseconverge.org/na2017/sites/default/files/I%27M%20ATTENDING%20v1_0.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://devoxx.us/&quot;&gt;&lt;img alt=&quot;devoxx_black_transparent400&quot; class=&quot;alignnone size-medium wp-image-4416&quot; height=&quot;104&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/02/devoxx_black_transparent400.png?w=300&amp;amp;h=104&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4445/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4445/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4445&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 01 Mar 2017 19:52:03 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: 2018 Eclipse Simultaneous Release Name: Photon</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4118</guid>
	<link>http://aniszczyk.org/2017/03/01/eclipse-2018-simultaneous-release-name-photon/</link>
	<description>&lt;p&gt;Hey Eclipse friends, as part of my duties on the &lt;a href=&quot;https://wiki.eclipse.org/Planning_Council&quot;&gt;Eclipse Planning Council&lt;/a&gt;, we have worked with the Eclipse Foundation EMO and wider community to finalize the Oxygen+1 simultaneous release name (see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=510201&quot;&gt;bug 510201&lt;/a&gt; for details): &lt;strong&gt;Photon&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;The 2018 Eclipse Simultaneous Release (Eclipse Oxygen +1) will be called *drum roll please*… Eclipse Photon! &lt;a href=&quot;https://t.co/wjK5wqNOPn&quot;&gt;https://t.co/wjK5wqNOPn&lt;/a&gt; &lt;a href=&quot;https://t.co/Bv6qahgJft&quot;&gt;pic.twitter.com/Bv6qahgJft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Eclipse Foundation (@EclipseFdn) &lt;a href=&quot;https://twitter.com/EclipseFdn/status/836949295072935936&quot;&gt;March 1, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Thanks to everyone who voted in the community!&lt;/p&gt;</description>
	<pubDate>Wed, 01 Mar 2017 17:27:30 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Converge &amp; Devoxx US are three weeks away - register now</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/yy4i_rSvYX8/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/yy4i_rSvYX8/</link>
	<description>Join us March 20-24 in San Jose for an amazing developer conference&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/yy4i_rSvYX8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 01 Mar 2017 16:31:00 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Achieving Web Integration in the IDE with Electron</title>
	<guid isPermaLink="false">http://cdtdoug.ca/?p=826</guid>
	<link>https://cdtdoug.ca/2017/03/01/achieving-web-integration-in-the-ide-with-electron/</link>
	<description>&lt;p&gt;It’s no secret that the modern developer’s favorite tool is Google. See a compile error you’ve never seen before, hell, cut and paste it into google.com and see if someone else has seen it and figured it out. It’s crazy how many times that works. &lt;span style=&quot;font-size: 1rem;&quot;&gt;That information sharing via blogs and forums makes the Internet an everyday part of a developer’s lives.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And, of course, it doesn’t end there. The Web makes it very easy to build services around shared data and artifacts. We put our bugs in Bugzilla or JIRA, our code in Github or some other git repo on a server somewhere, run our builds in Jenkins, code reviews on Github or Gerrit. These web based tools are indispensable for developers.&lt;/p&gt;
&lt;p&gt;Now, it’s not entirely without merit that you would want to put your IDE up on the Web as well. It could be just another tab in your browser that you already have open for these other tools. But people who know me know that I’m not sold that that’s a good answer for everyone. And I especially look to embedded developers who have boards hooked up to their development machines and have installed a bucket of tools, as old as they may be, that do a great job helping build software for those boards. That, and you’re laptop has a lot of power that you own and can do what you want with without sharing with dozens of other developers who want to do whatever they want to.&lt;/p&gt;
&lt;p&gt;For me the best solution for now would be to find a way to merge all the great tools on the Web with all the great tools on your desk into seamless workflows where you forget where the tools reside and you just do. And that’s where my experimentation with &lt;a href=&quot;https://electron.atom.io&quot;&gt;Electron&lt;/a&gt; and my &lt;a href=&quot;https://github.com/dschaefer/eclipse-two&quot;&gt;Two IDE&lt;/a&gt; are showing a lot of promise. Let’s walk through an example with Github.&lt;/p&gt;
&lt;p&gt;Have you ever opened up a Github page and clicked on the “Clone or Download” drop down? It’s pretty interesting that one of the choices is “Open in Desktop”. Click it in your browser and it takes you to a page to download Github’s developer tool. I’ve never used it but it sparked a similar idea I had for Two. It would be really cool to have a button that triggers the clone and sets it up in the IDE all in one click and a quick wizard for local settings.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-827 aligncenter&quot; src=&quot;https://i1.wp.com/cdtdoug.ca/wp-content/uploads/Screen-Shot-2017-03-01-at-10.31.42-AM.png?resize=428%2C201&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So how would we go about that. Looking at the HTML source for the page, I was able to find the elements that created the Open In Desktop button. What I’d love to do is munge it somehow to say Open in Two IDE and add a click handler that would trigger the rest of the clone action.&lt;/p&gt;
&lt;p&gt;One of the coolest things about Electron is that it has Chromium built in. And you can take full advantage of that and use the special features that Chromium has that the other browsers don’t. One of those is the webview element. It essentially creates a new rendering process that renders into an element managed by another process. I use it in Two to add a Github browser.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-828 aligncenter&quot; src=&quot;https://i0.wp.com/cdtdoug.ca/wp-content/uploads/Screen-Shot-2017-03-01-at-10.48.31-AM.png?resize=512%2C285&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One of the attributes of the webview element allows you to specify a preload script. This script is run by the new rendering process before anything else in the new context. And this script has full access to the node.js environment. It lets you do some crazy things, like this:&lt;/p&gt;
&lt;pre&gt;import { remote } from 'electron';

window.onload = () =&amp;gt; {
  const box = document.querySelector('.mt-2');
  if (box) {
    const a: HTMLAnchorElement = &amp;lt;HTMLAnchorElement&amp;gt; box.children[0];
    a.textContent = 'Open in Two IDE';
    a.href = '#';

    const input = box.previousElementSibling.children[2].children[0];
    a.onclick = () =&amp;gt; {
      remote.dialog.showMessageBox({
        type: 'info',
        message: `Cloning ${input.getAttribute('value')}`
      });
    };
  }
};&lt;/pre&gt;
&lt;p&gt;Now, this is TypeScript. But what I’m doing here is ‘require’ing the electron node module with the import statement which gives me access to the Electron remote API to call back to the main process. Whenever a page loads, I search the page for the element that contains the “Open in Desktop” element. I essentially hijack it and change the text and href and add a click handler to it. I get pretty sneaky looking for the URL for the clone by walking around the DOM a bit. I finally show that URL in a dialog box by calling the remote API to do that. Only the main process can open native dialogs.&lt;/p&gt;
&lt;p&gt;Of course, I’ll eventually ask the user for a destination file path and any other arguments and then call the local git to make the clone happen and add it to the list of paths to show in the FIle Explorer. But for now, this is what I see:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-830&quot; src=&quot;https://i0.wp.com/cdtdoug.ca/wp-content/uploads/Screen-Shot-2017-03-01-at-11.01.48-AM.png?resize=440%2C239&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, you should be quick to point out that this is very fragile. If the Github gang redo the layout of the page, this breaks. But my theory is that if this type of integration becomes popular, you have a bit more leverage to go to them and create APIs, by having fixed classes or element ids that are more robust. Then any IDE trying to do this would benefit.&lt;/p&gt;
&lt;p&gt;At any rate, this was a pretty early experiment that I haven’t spent a lot of time with. But it shows the path. By manipulating the content of the pages provided by web services, you can create workflows that span those services and the local development environment. And the user sees one tool. Click the Open in IDE button and it all magically gets set up and the IDE can switch automatically to the Code page to let you start working with it. Imagine what else you can do like this…&lt;/p&gt;</description>
	<pubDate>Wed, 01 Mar 2017 16:10:28 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che – Day 3: Adding a custom Workspace Stack</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27866</guid>
	<link>http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series we share our experiences extending &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; as well as describe how we have added initial EMF support for the Eclipse Che IDE. Please see the &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;first post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in this series for an overview of our goals. In the &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;previous blog post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, we described how to add support for code generation by reusing the existing EMF code generator which is bundled with Eclipse. To make this possible we added a classic Eclipse Modeling Tools Edition to our workspace. We demonstrated that we are able to run the Eclipse Modeling Tools on the command line in order to trigger the EMF code generator. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For this to be possible, we had to manually install Eclipse into our workspace. We also defined a command in our Che IDE to conveniently allow us to run the code generation by simply clicking a button. While this works fine, we would like  to make this scalable so we can share our environment with friends and colleagues. Fortunately this can be achieved quite easily by defining a so called “Stack” in Che. A stack is like a blueprint for a running workspace. If you are familiar with object-oriented terminology, a Stack is similar to a class (for example in Java), while a running instance (an Object) is called a workspace. Defining stacks is supported by the Che Dashboard UI, we do not have to write any code to make this work. Technically, a Che Stack is based on one or more Dockerfiles. If we want to provide a Stack that ships with a pre-installed Eclipse Modelling Edition we need to provide a Docker image that contains exactly that.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;Whenever you wish to create your own docker image to be used as a Stack, it is a good idea to use one of the Che images as your base image. That way you won’t have to maintain prerequisites such as Java. In our example we will use the base image of the Java stack. Here is the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dockerfile&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we use, as you can see it is quite small. We added a few comments to make it self explanatory.&lt;/span&gt;&lt;br /&gt;



&lt;/p&gt;&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family: monospace;&quot;&gt;FROM codenvy&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;ubuntu_jdk8
MAINTAINER Mathias Hansen mhansen&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;@&lt;/span&gt;eclipsesource.com
 
USER root
&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# Install Eclipse Modeling Tools&lt;/span&gt;
RUN &lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;&quot;Installing eclipse...&quot;&lt;/span&gt;
&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;cd&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;
&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;wget&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-q&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-O&lt;/span&gt; - https:&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;//&lt;/span&gt;ftp.fau.de&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;eclipse&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;technology&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;epp&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;downloads&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;release&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;neon&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;eclipse-modeling-neon-&lt;span style=&quot;color: #000000;&quot;&gt;1&lt;/span&gt;-linux-gtk-x86_64.tar.gz &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;|&lt;/span&gt; &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;tar&lt;/span&gt; zx
 
&lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# Reset to the default user&lt;/span&gt;
USER user&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;



&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;After you write your &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dockerfile&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; you have to build it, i.e. with the following command :&lt;/span&gt;



&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family: monospace;&quot;&gt; 
docker build &lt;span style=&quot;color: #660033;&quot;&gt;-t&lt;/span&gt; eclipsesource&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;emfneon_jdk8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At last, you can push your new image to a registry or repository, for example Docker Hub.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;Now we can set up a Che Stack based on our new Docker image. To create a new Stack navigate to the “Stacks” section in the Che sidebar. Then press “Add stack”. A wizard page will appear which will assist you in creating your new Stack. In our example it looks like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image09-1.png&quot;&gt;&lt;img alt=&quot;image09&quot; class=&quot;alignnone wp-image-27867&quot; height=&quot;320&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image09-1-300x246.png&quot; width=&quot;390&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can see, you may give your Stack a name such that you can easily find it again later, define the machines you wish to start (we use the default), and the docker image to be used. Additionally, you can add commands (i.e our “Run EMF Code Generator” command manually defined in the last post TBD add link to latest post). Finally, select the Category under which the Stack will be listed. If you scroll to the bottom of the page you can also edit your Stack configuration in the JSON format. This is quite handy if, for example, you wish to send your Stack configuration to a friend or a member of your team. To do so, simply copy the JSON and send it. The JSON for our EMF Stack looks like this, copy and paste it into the raw view to give it a try:&lt;/span&gt;&lt;/p&gt;



&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;json&quot; style=&quot;font-family: monospace;&quot;&gt;{
  &quot;name&quot;: &quot;EMF&quot;,
  &quot;description&quot;: &quot;EMF Stack&quot;,
  &quot;scope&quot;: &quot;advanced&quot;,
  &quot;tags&quot;: [
    &quot;Java 1.8&quot;,
    &quot;EMF&quot;
  ],
  &quot;components&quot;: [
    {
      &quot;name&quot;: &quot;Eclipse Modeling Edition&quot;,
      &quot;version&quot;: &quot;Neon.2&quot;
    }
  ],
  &quot;source&quot;: {
    &quot;type&quot;: &quot;image&quot;,
    &quot;origin&quot;: &quot;codenvy/ubuntu_jdk8&quot;
  },
  &quot;workspaceConfig&quot;: {
    &quot;environments&quot;: {
      &quot;EMF&quot;: {
        &quot;machines&quot;: {
          &quot;dev-machine&quot;: {
            &quot;agents&quot;: [
              &quot;org.eclipse.che.terminal&quot;,
              &quot;org.eclipse.che.ws-agent&quot;,
              &quot;org.eclipse.che.ssh&quot;
            ],
            &quot;servers&quot;: {},
            &quot;attributes&quot;: {
              &quot;memoryLimitBytes&quot;: &quot;2147483648&quot;
            }
          },
          &quot;EMF&quot;: {
            &quot;agents&quot;: [
              &quot;org.eclipse.che.terminal&quot;,
              &quot;org.eclipse.che.ssh&quot;
            ],
            &quot;servers&quot;: {},
            &quot;attributes&quot;: {}
          }
        },
        &quot;recipe&quot;: {
          &quot;content&quot;: &quot;services:\n dev-machine:\n  image: codenvy/ubuntu_jdk8\n EMF:\n  image: eclipsesource/emfneon_jdk8\n  mem_limit: 2147483648\n&quot;,
          &quot;contentType&quot;: &quot;application/x-yaml&quot;,
          &quot;type&quot;: &quot;compose&quot;
        }
      }
    },
    &quot;name&quot;: &quot;default&quot;,
    &quot;defaultEnv&quot;: &quot;EMF&quot;,
    &quot;description&quot;: null,
    &quot;commands&quot;: [
      {
        &quot;name&quot;: &quot;Run EMF Code Generator&quot;,
        &quot;type&quot;: &quot;custom&quot;,
        &quot;commandLine&quot;: &quot;/eclipse/eclipse -noSplash -data ${current.project.path} -application org.eclipse.emf.codegen.ecore.Generator -model -edit ${current.project.path}/org.eclipse.emf.ecp.makeithappen.model/model/task.genmodel &quot;,
        &quot;attributes&quot;: {}
      }
    ]
  }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now we have made it possible to share our development environment with other programmers. Our tooling (i.e. the EMF code generator) has been bundled into a Che workspace. The only thing you need is a JSON file and you are good to go! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Therefore, installing tooling into Che workspaces is a pretty simple, lightweight, yet powerful extension mechanism. Basically, every tool that can run on a Docker container can be used. Through this we were able to extend Che without writing any code. However, thus far we have not extended the Browser IDE (except adding a command). For this, it is required to write some code and to build a custom version of Che. This will be described in our next blog post, so stay tuned! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please feel free to &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=EMF+Support+for+Che+%26%238211%3B+Day+3%3A+Adding+a+custom+Workspace+Stack&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&amp;amp;t=EMF+Support+for+Che+%26%238211%3B+Day+3%3A+Adding+a+custom+Workspace+Stack&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/#comments&quot;&gt;2 Comments&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 01 Mar 2017 12:57:52 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Open IoT Challenge 3.0 — Finalists</title>
	<guid isPermaLink="false">https://medium.com/p/ef619b6b9e72</guid>
	<link>https://medium.com/@roxanne.iot/open-iot-challenge-3-0-finalists-ef619b6b9e72?source=rss-82f8afd3e513------2</link>
	<description>&lt;div class=&quot;medium-feed-item&quot;&gt;&lt;p class=&quot;medium-feed-snippet&quot;&gt;Monday was a big day for the Open IoT Challenge participants.&lt;/p&gt;&lt;p class=&quot;medium-feed-link&quot;&gt;&lt;a href=&quot;https://medium.com/@roxanne.iot/open-iot-challenge-3-0-finalists-ef619b6b9e72?source=rss-82f8afd3e513------2&quot;&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 01 Mar 2017 09:38:20 +0000</pubDate>
</item>
<item>
	<title>itemis: YAKINDU Statechart Tools February Release – New and Noteworthy</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/yakindu-statechart-tools-february-release-new-and-noteworthy</guid>
	<link>https://blogs.itemis.com/en/yakindu-statechart-tools-february-release-new-and-noteworthy</link>
	<description>&lt;p&gt;We're happy to announce the new YAKINDU Statechart Tools releases: YAKINDU Statechart Tools Community Edition 2.9.3 and YAKINDU Statechart Tools Professional Edition 1.0.2 contain the following features and bugfixes.&lt;/p&gt;  
&lt;h2&gt;&lt;strong&gt;Support for variadic operations&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Operations with a variable number of parameters are supported now (&lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/1191&quot;&gt;#1191&lt;/a&gt;). It is possible to specify an operation’s last parameter as being allowed to occur an arbitrary number of times. This is usually called “varargs”, short for “variable number of arguments”. Compared to a “regular” operation parameter declaration, the varargs parameter name is followed by three dots (&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) to indicate it may occur zero or more times.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For example, an operation &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sum&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; adding a variable number of summands and returning their sum could be defined as follows:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;YAKINDU Statechart Tools-Release-February.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/YAKINDU%20Statechart%20Tools/YAKINDU%20Statechart%20Tools-Release-February.png?t=1488205514538&amp;amp;width=320&amp;amp;name=YAKINDU%20Statechart%20Tools-Release-February.png&quot; style=&quot;width: 320px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;320&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Sample calls of this operation are &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sum(1, 42)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sum(2, 4711, 815)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sum(7, 555, 338, 881, 192, 69, 999, 610)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, or even &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sum(0)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.  In some target languages, the first parameter must advise the called function or method of how many instances of the last parameter it should expect.. For example, a C function needs to receive this information while a Java method does not.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Change default transition layouting to rectilinear&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our recent &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/pizza-usability-and-a-little-slice-of-romance&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;usability studies&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; show that &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;rectilinear layouting provides a much more robust style of rendering transitions, as the angle values of the bendpoints will always stay at 90° (&lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/1162&quot;&gt;#1162&lt;/a&gt;). Manually adjusted oblique transitions change the angle values of their bendpoints to unexpected/unwanted degrees when model elements are changed/added/resized. This can cause a visually unappealing result. &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Thus, we changed the default routing from &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Oblique &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;to &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Rectilinear&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. If you prefer the Oblique routing style or don’t want to mix routing styles in your existing diagrams, you can change the default routing style via &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Window -&amp;gt; Preferences / YAKINDU SCT -&amp;gt; Diagram Appearances&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;YAKINDU-statechart-tools-diagramm-appearance.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/YAKINDU%20Statechart%20Tools/Diagramms.png?t=1488205514538&amp;amp;width=320&amp;amp;name=Diagramms.png&quot; style=&quot;width: 320px; display: block; margin-left: auto; margin-right: auto;&quot; title=&quot;YAKINDU-statechart-tools-diagramm-appearance.png&quot; width=&quot;320&quot; /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Distinguish between transient, persistent and stale error markers &lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;All problem markers that are created during live validation are not persisted to the problems view anymore (&lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/1190&quot;&gt;#1190&lt;/a&gt;). This behavior is now the same as in other Eclipse based editors, like Java Development Tools or C Development Tools.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The new release also contains several bugfixes and new examples.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Fixed closing subdiagram editors closes all editors (&lt;/span&gt;&lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/1212&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;#1212&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;)&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Fixed constant definition without default value allowed (&lt;/span&gt;&lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/1189&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;#1189&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;)&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Fixed empty struct generated from interface description (&lt;/span&gt;&lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/1188&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;#1188&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;)&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;Added examples for integrating headless code generation with Maven, Gradle and Make (&lt;a href=&quot;https://www.itemis.com/en/yakindu/statechart-tools/documentation/examples/&quot;&gt;examples&lt;/a&gt; or &lt;a href=&quot;https://github.com/Yakindu/statecharts/issues/52&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;#52&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;)&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;You can download your new release here:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a class=&quot;cta_button&quot; href=&quot;https://cta-image-cms2.hubspot.com/ctas/v2/public/cs/ci/?pg=740ac066-d122-40cc-8df5-292f11e34073&amp;amp;pid=761475&amp;amp;ecid=&amp;amp;eid=&amp;amp;ic=&quot;&gt; &lt;img align=&quot;middle&quot; alt=&quot;Download and try  YAKINDU Statechart Tools&quot; class=&quot;hs-cta-img &quot; src=&quot;https://no-cache.hubspot.com/cta/default/761475/740ac066-d122-40cc-8df5-292f11e34073.png&quot; /&gt; &lt;/a&gt;&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fyakindu-statechart-tools-february-release-new-and-noteworthy&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 27 Feb 2017 13:50:17 +0000</pubDate>
	<author>andreas.muelder@itemis.de (Andreas Mülder)</author>
</item>
<item>
	<title>Kichwa Coders: Creating a new stack in Eclipse Che from an existing Docker image</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1223</guid>
	<link>https://kichwacoders.com/2017/02/24/creating-a-new-stack-in-eclipse-che-from-an-existing-docker-image/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;title_che_custom_whalesay&quot; class=&quot;alignnone size-full wp-image-1363&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/title_che_custom_whalesay.png?w=840&quot; /&gt;In Eclipse Che, stacks are runtime configurations for workspaces.  Eclipse Che 5.0 provides the ability to quickly create a new stack based on an existing Docker image. There are &lt;a href=&quot;https://www.eclipse.org/che/docs/workspace/recipes/index.html#inherit-from-non-eclipse-che-base-images&quot; target=&quot;_blank&quot;&gt;a few requirements&lt;/a&gt;, with the main one being that the image must include a bash shell (fortunately most already do). Additionally, Docker images used with Che must have a non-terminating &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt; command so that the container doesn’t shut down immediately after loading. However, we can do this in Che without having to modify the Docker image.&lt;/p&gt;
&lt;p&gt;This article outlines how you can create a new stack based on the &lt;a href=&quot;https://hub.docker.com/r/docker/whalesay/&quot; target=&quot;_blank&quot;&gt;docker/whalesay&lt;/a&gt; image, the Docker image many folks would have come across when going through the &lt;a href=&quot;https://docs.docker.com/engine/getstarted/step_three/&quot; target=&quot;_blank&quot;&gt;Docker tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Step 1: Create a new Runtime Stack&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kichwacoders.com/2017/02/14/getting-started-with-eclipse-che-on-windows-10/&quot; target=&quot;_blank&quot;&gt;Install&lt;/a&gt; and launch Eclipse Che. (This article is based on 5.3.1)&lt;/li&gt;
&lt;li&gt;In the left-hand menu, click on ‘Stacks’ then ‘Add Stack’&lt;img alt=&quot;stacks1&quot; class=&quot;alignnone size-full wp-image-1245&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks1.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;li&gt;In the new stack page, fill in the ‘Name’ field e.g. &lt;strong&gt;Eclipse Che Whalesay &lt;img alt=&quot;stacks2&quot; class=&quot;alignnone size-full wp-image-1260&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks21.png?w=840&quot; /&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;For good measure, in the Tags section, delete the Java 1.8 tag and you can add in any preferred tags (press Enter after each tag to turn it blue).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From now your stack is available on the dashboard or stack list, but it doesn’t yet do anything impressive.&lt;/p&gt;
&lt;h2&gt;Step 2: Reference the Docker Image&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;To reference the Docker image, in the stack editor, first scroll down to the ‘Raw Configuration’ section and click ‘Show’. Find where it says ‘image’ and replace the existing entry with the &lt;strong&gt;docker/whalesay&lt;/strong&gt; one. Click ‘Save’.&lt;img alt=&quot;stacks3&quot; class=&quot;alignnone size-full wp-image-1262&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks3.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;li&gt;As the whalesay image normally shuts down after running, we need to make it so it keeps running. We can do this using Docker Compose syntax that is now supported in the stack editor. To do this we add the following command to the content.
&lt;pre class=&quot;brush: plain; light: true; title: ; notranslate&quot;&gt;command: [tail, -f, /dev/null]&lt;/pre&gt;
&lt;p&gt;&lt;img alt=&quot;stacks5.png&quot; class=&quot;alignnone size-full wp-image-1313&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks5.png?w=840&quot; /&gt;&lt;br /&gt;
Whitespace matters so check the recipe preview in the ‘Runtimes’ section to ensure it looks like correctly formatted Docker Compose syntax.  Although this is a bit hacky, it is great because it means we can reuse the docker image completely unchanged. &lt;img alt=&quot;stacks7.png&quot; class=&quot;alignnone size-full wp-image-1322&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks7.png?w=840&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 3: Add a Custom Command&lt;/h2&gt;
&lt;p&gt;Next we will create a command to allow us easily run the whalesay image within the browser IDE.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the Commands section, click Add. Fill in the name and command fields. In this case we’ll simply make the command just say ‘boo’.
&lt;ul&gt;
&lt;li&gt;Name: &lt;strong&gt;cowsay&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Command: &lt;strong&gt;cowsay boo&lt;/strong&gt;&lt;img alt=&quot;stacks8&quot; class=&quot;alignnone size-full wp-image-1329&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks8.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 4: Test the Stack&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;That’s it, now we can test it straightaway by clicking on the ‘Test’ button. A dialog will pop-up, click ‘Test Workspace’, no need to import any projects.&lt;/li&gt;
&lt;li&gt;This should pull the whalesay image and launch up a workspace with it configured.&lt;img alt=&quot;stacks9.png&quot; class=&quot;alignnone size-full wp-image-1333&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks9.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Click on the play icon next to the cowsay command and you should whalesay in the terminal saying boo!&lt;img alt=&quot;stacks10.png&quot; class=&quot;alignnone size-full wp-image-1347&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks10.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Bonus Step: Use Macros&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We can also use macros in commands, try editing the command to have the whale say the name of the selected file like this:
&lt;ul&gt;
&lt;li&gt;Name: &lt;strong&gt;cowsay&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Command: &lt;strong&gt;cowsay ${explorer.current.file.name}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A full list of macros can be found here: &lt;a href=&quot;https://www.eclipse.org/che/docs/ide/commands/#macros&quot; target=&quot;_blank&quot;&gt;https://www.eclipse.org/che/docs/ide/commands/#macros&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Then test the workspace again, this time including one or two example projects. Click on a file, then run the command. This time whalesay should say the name of any selected files. &lt;img alt=&quot;stacks11&quot; class=&quot;alignnone size-full wp-image-1352&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/stacks11.png?w=840&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it, an unchanged Docker image easily integrated into a new runtime stack!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;whalesaystack&quot; class=&quot;alignnone size-full wp-image-1360&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/02/whalesaystack.gif?w=840&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1223/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1223/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1223&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 24 Feb 2017 14:07:37 +0000</pubDate>
</item>
<item>
	<title>itemis: itemis + TypeFox = Xtext!</title>
	<guid isPermaLink="true">https://blogs.itemis.com/de/itemis-typefox-xtext</guid>
	<link>https://blogs.itemis.com/de/itemis-typefox-xtext</link>
	<description>&lt;p class=&quot;p1&quot;&gt;Wie viele wissen, hat sich vor etwa einem Jahr etwas sehr entscheidendes im &lt;a href=&quot;http://www.eclipse.org/Xtext/&quot;&gt;Eclipse Xtext Projekt&lt;/a&gt; verändert. Unsere Kollegen in Kiel haben sich entschlossen itemis zu verlassen und haben ein eigenes Unternehmen gegründet, &lt;a href=&quot;http://typefox.io/&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;&lt;img alt=&quot;itemis &amp;amp; TypeFox&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Bildschirmfoto%202017-02-24%20um%2012.55.23.png?t=1488205514538&amp;amp;width=299&amp;amp;name=Bildschirmfoto%202017-02-24%20um%2012.55.23.png&quot; style=&quot;width: 299px; margin: 0px 0px 10px 10px; float: right;&quot; title=&quot;itemis &amp;amp; TypeFox&quot; width=&quot;299&quot; /&gt;Damit basiert das Xtext Projekt nun mehr auf zwei großen Säulen und nicht mehr nur auf einer.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;Um ehrlich zu sein sind &lt;a href=&quot;https://www.itemis.com/en/xtext/?utm_campaign=Professional%20Xtext&amp;amp;utm_medium=personal%20blog&amp;amp;utm_source=jenswagener.de&amp;amp;__hstc=151070886.2b8d74c46e3784ce0a55e47470205c18.1487936798287.1487936798287.1487936798287.1&amp;amp;__hssc=151070886.1.1487936798287&amp;amp;__hsfp=1607963709&quot;&gt;wir bei itemis&lt;/a&gt; nicht gerade glücklich gewesen über diese Entwicklung. Und wie immer geht eine Trennung nicht ohne Reibereien ab.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;Nichtsdestotrotz werden wir unser Open Source Commitment im Allgemeinen und unser Eclipse Xtext Engagement im Speziellen nicht aufgeben. Im Gegenteil, wir werden uns verstärkt beiden Themen widmen und uns weiterhin voll auf das Thema Language Engineering konzentrieren.  Wir haben einiges vor und werden bald eine großartige Neuigkeit ankündigen können. Lasst euch mal überraschen.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;Dabei freuen wir uns auf die Zusammenarbeit mit unseren Ex-Kollegen von TypeFox, deren Kompetenz wir nach wie vor sehr schätzen. Wir sind uns sicher, dass das Xtext Projekt mehr denn je auf einem soliden Fundament steht und auch in Zukunft das sein wird was es immer war: Ein verdammt gutes Framework.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;Vielen Dank an alle die in der Vergangenheit hierzu beigetragen haben und es in Zukunft tun werden.&lt;/p&gt;  
&lt;p class=&quot;p1&quot;&gt;As you might have noticed there was a very crucial change in the &lt;a href=&quot;http://www.eclipse.org/Xtext/&quot;&gt;Eclipse Xtext project&lt;/a&gt; at the beginning of last year. Our colleagues in Kiel have decided to leave itemis and have founded their own company, &lt;a href=&quot;http://typefox.io/&quot;&gt;TypeFox&lt;/a&gt;.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;&lt;img alt=&quot;itemis &amp;amp; TypeFox&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Bildschirmfoto%202017-02-24%20um%2012.55.23.png?t=1488205514538&amp;amp;width=299&amp;amp;name=Bildschirmfoto%202017-02-24%20um%2012.55.23.png&quot; style=&quot;width: 299px; margin: 0px 0px 10px 10px; float: right;&quot; title=&quot;itemis &amp;amp; TypeFox&quot; width=&quot;299&quot; /&gt;The Xtext project is now based on two major pillars and not just on one.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;To be honest, &lt;a href=&quot;https://www.itemis.com/en/xtext/?utm_campaign=Professional%20Xtext&amp;amp;utm_medium=personal%20blog&amp;amp;utm_source=jenswagener.de&amp;amp;__hstc=151070886.2b8d74c46e3784ce0a55e47470205c18.1487936798287.1487936798287.1487936798287.1&amp;amp;__hssc=151070886.1.1487936798287&amp;amp;__hsfp=1607963709&quot;&gt;we at itemis&lt;/a&gt; were not were happy about this. As always, a separation does not take place without personal frictions.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;None the less we will continue our Open Source Commitment, in particular our commitment to Eclipse Xtext.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;We decided to increasingly focus on the broader topic of Language Engineering, in addition to the specific technology of Xtext. We have made a lot of plans and will soon be able to announce great news. Let us surprise you.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;We are looking forward to working with our ex-colleagues of TypeFox, whose expertise we still value very much. We are sure that the Xtext project is more than ever on a solid foundation and will be in the future what it always was: A damn good framework.&lt;/p&gt; 
&lt;p class=&quot;p1&quot;&gt;Thanks to all who have contributed to this in the past and will do it in the future.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fde%2Fitemis-typefox-xtext&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 24 Feb 2017 13:35:42 +0000</pubDate>
	<author>wagener@itemis.de (Jens Wagener)</author>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio Maintenance Release for Eclipse Neon.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/10.3.0.ga-for-neon.2.html</guid>
	<link>https://tools.jboss.org/blog/10.3.0.ga-for-neon.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.3.Final.html&quot;&gt;JBoss Tools 4.4.3&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/neon/10.3.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 10.3&lt;/a&gt; for Eclipse Neon.2 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio10&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio10.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://www.jboss.org/products/devstudio.html&quot;&gt;JBoss Products page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar jboss-devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) JBoss Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.6.2 (Neon.2) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon2&quot;&gt;Eclipse 4.6.2 Neon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat JBoss Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/neon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was improvements for container based development and bug fixing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;improved-openshift-3-and-docker-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-openshift-3-and-docker-tools&quot;&gt;&lt;/a&gt;Improved OpenShift 3 and Docker Tools&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We continue to work on providing better experience for container based development in JBoss Tools and Developer Studio. Let’s go through a few interesting updates here.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;scaling-from-pod-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#scaling-from-pod-resources&quot;&gt;&lt;/a&gt;Scaling from pod resources&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When an application is being deployed to Openshift, it was possible to scale the pod resources from the
      service resource.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;scale command from service&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/scale-command-from-service.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;However, it was not a very logical choice. So the command is also available at the pod level, leading to better usability.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;scale command from pod&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/scale-command-from-pod.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-container-platform-3-4-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-container-platform-3-4-support&quot;&gt;&lt;/a&gt;OpenShift Container Platform 3.4 support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift Container Platform (OCP) 3.4 has been
      &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-breaks-down-barriers-enterprise-container-adoption-dynamic-storage-provisioning-latest-version-red-hat-openshift-container-platform&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt; by Red Hat.
      JBossTools 4.4.3 has been validated against OCP 3.4.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;cdk-3-beta-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#cdk-3-beta-server-adapter&quot;&gt;&lt;/a&gt;CDK 3 Beta Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new server adapter has been added to support the next generation of CDK 3. This is Tech Preview in this release as CDK 3 is Beta.
      While the server adapter itself has limited functionality, it is able to start and stop the CDK virtual machine via its minishift binary.
      Simply hit Ctrl+3 (Cmd+3 on OSX) and type CDK, that will bring up a command to setup and/or launch the CDK server adapter.
      You should see the old CDK 2 server adapter along with the new CDK 3 one (labeled &lt;strong&gt;Red Hat Container Development Kit 3 (Tech Preview)&lt;/strong&gt; ).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All you have to do is set the credentials for your Red Hat account and the location of the CDK’s minishift binary file and the type of virtualization hypervisor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you’re finished, a new CDK Server adapter will then be created and visible in the Servers view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once the server is started, Docker and OpenShift connections should appear in their respective views, allowing the user to quickly create a new Openshift application and begin developing their AwesomeApp in a highly-replicatable environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;cdk3 server adapter4&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/cdk3-server-adapter4.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      This is Tech Preview. The implementation is subject to change, may not work with next releases of CDK 3 and testing has been limited.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;hibernate-runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime  providers.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;hibernate-runtime-provider-updates-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#hibernate-runtime-provider-updates-2&quot;&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.0 runtime provider now incorporates Hibernate Core version 5.0.12.Final and Hibernate Tools version 5.0.4.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.1 runtime provider now incorporates Hibernate Core version 5.1.4.Final and Hibernate Tools version 5.1.2.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.2 runtime provider now incorporates Hibernate Core version 5.2.7.Final and Hibernate Tools version 5.2.1.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-5-1-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-5-1-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.5.1.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.5.1.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.5.1.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;startup&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/forge/images/4.4.3.Final/startup.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.4.3 and Developer Studio 10.3 out we are already working on the next maintenance release for Eclipse Neon.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 24 Feb 2017 11:42:06 +0000</pubDate>
</item>
<item>
	<title>Dirk Fauth: Control OSGi DS Component Instances via Configuration Admin</title>
	<guid isPermaLink="false">http://blog.vogella.com/?p=7542</guid>
	<link>http://blog.vogella.com/2017/02/24/control-osgi-ds-component-instances-via-configuration-admin/</link>
	<description>&lt;p&gt;While trying to clean up the OSGi services in the Eclipse Platform Runtime I came across the fact that singleton service instances are not always feasible. For example the fact that the localization is done on application level does not work in the context of RAP, where every user can have a different localization.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;http://blog.vogella.com/2017/02/13/control-osgi-ds-component-instances/&quot; target=&quot;_blank&quot;&gt;my last blog post&lt;/a&gt; I showed how to manage service instances with Declarative Services. In that scope I mainly showed the following scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one service instance per runtime&lt;/li&gt;
&lt;li&gt;one service instance per bundle&lt;/li&gt;
&lt;li&gt;one service instance per component/requestor&lt;/li&gt;
&lt;li&gt;one service instance per request&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For cases like the one in the RAP scenario, these four categories doesn’t match very well. We actually need something additionally like one service per session. But a session is nothing natural in the OSGi world. At least not as natural as it is in the context of a web application.&lt;/p&gt;
&lt;p&gt;First I tried to find a solution using PROTOTYPE scoped services introduced with DS 1.3. But IMHO that approach doesn’t fit very well, as by default the services have bundle scope, unless the consumer specifies that a new instance is needed. Also the approach of creating service instances on demand by using a &lt;em&gt;Factory Component&lt;/em&gt; or the DS 1.3 &lt;code&gt;ComponentServiceObjects&lt;/code&gt; interface does not seem to be a good option in this case. The consumer is in charge of creating and destroying the instances, and he needs to be aware of that fact.&lt;/p&gt;
&lt;p&gt;A session is mainly used to associate a set of states to someone (e.g. a user) over time. The localization setting of a user is a configuration value. And configurations for OSGi services are managed by the Configuration Admin. Having these things in mind and searching the web and digging through the &lt;a href=&quot;https://www.osgi.org/developer/specifications/&quot; target=&quot;_blank&quot;&gt;OSGi Compendium Specification&lt;/a&gt;, I came across the &lt;em&gt;Managed Service Factory&lt;/em&gt; and &lt;a href=&quot;http://njbartlett.name/2010/07/19/factory-components-in-ds.html&quot; target=&quot;_blank&quot;&gt;this blog post by Neil Bartlett&lt;/a&gt; (already quiet some years old).&lt;/p&gt;
&lt;p&gt;To summarize the information in short, the idea is to create a new service instance per &lt;em&gt;Component Configuration&lt;/em&gt;. So for every session a new &lt;em&gt;Component Configuration&lt;/em&gt; needs to be created, which leads to the creation of a new &lt;em&gt;Component Instance&lt;/em&gt;. Typically some unique identifier like the session ID needs to be added to the component properties, so it is possible to use filters based on that.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Managed Service Factory&lt;/em&gt; description in the specification is hard to understand (at least for me), the tutorials that exist mainly focus on the usage without Declarative Services by implementing the corresponding interfaces, and the blog post by Neil unfortunately only covers half of the topic. Therefore I will try to explain how to create service instances for different configurations with a small example that is based on the previous tutorial.&lt;/p&gt;
&lt;p&gt;The sources for this blog post can be found in my DS projects on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-pde&quot; target=&quot;_blank&quot;&gt;DS 1.2 PDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fipro78/osgi-ds-getting-started-bndtools&quot; target=&quot;_blank&quot;&gt;DS 1.3 Bndtools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
I will try to bring in some Configuration Admin details at the corresponding places, but for more information in advance please have a look at my &lt;a href=&quot;http://blog.vogella.com/2016/09/26/configuring-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Configuring OSGi Declarative Services&lt;/a&gt; blog post.&lt;/p&gt;
&lt;h2&gt;Service Implementation&lt;/h2&gt;
&lt;p&gt;Let’s start by creating the service implementation. Implement the &lt;code&gt;OneShot&lt;/code&gt; service interface and put it in the &lt;code&gt;org.fipro.oneshot.provider&lt;/code&gt; bundle from the previous blog post.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    configurationPid=&quot;org.fipro.oneshot.Borg&quot;,
    configurationPolicy=ConfigurationPolicy.REQUIRE)
public class Borg implements OneShot {

    @interface BorgConfig {
        String name() default &quot;&quot;;
    }

    private static AtomicInteger instanceCounter =
            new AtomicInteger();

    private final int instanceNo;
    private String name;

    public Borg() {
        instanceNo = instanceCounter.incrementAndGet();
    }

    @Activate
    void activate(BorgConfig config) {
        this.name = config.name();
    }

    @Modified
    void modified(BorgConfig config) {
        this.name = config.name();
    }

    @Override
    public void shoot(String target) {
        System.out.println(&quot;Borg &quot; + name
            + &quot; #&quot; + instanceNo + &quot; of &quot;+ instanceCounter.get()
            + &quot; took orders and executed &quot; + target);
    }

}&lt;/pre&gt;
&lt;p&gt;You should notice the following with that implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We specify a &lt;strong&gt;configuration PID&lt;/strong&gt; so it is not necessary to use the fully qualified class name later.&lt;br /&gt;
&lt;span style=&quot;text-decoration: underline;&quot;&gt;Remember:&lt;/span&gt; the configuration PID defaults to the configured &lt;strong&gt;name&lt;/strong&gt;, which defaults to the fully qualified class name of the component class.&lt;/li&gt;
&lt;li&gt;We set the &lt;strong&gt;configuration policy&lt;/strong&gt; &lt;em&gt;REQUIRE&lt;/em&gt;, so the component will only be &lt;span style=&quot;text-decoration: underline;&quot;&gt;satisfied&lt;/span&gt; and therefore &lt;span style=&quot;text-decoration: underline;&quot;&gt;activated&lt;/span&gt; once a matching configuration object is set by the Configuration Admin.&lt;/li&gt;
&lt;li&gt;We create the &lt;em&gt;Component Property Type&lt;/em&gt; &lt;code&gt;BorgConfig&lt;/code&gt; for type safe access to the &lt;em&gt;Configuration Properties&lt;/em&gt; (DS 1.3).&lt;/li&gt;
&lt;li&gt;We add life cycle methods for &lt;em&gt;activate&lt;/em&gt; to initially consume and &lt;em&gt;modified&lt;/em&gt; to be able to change the configuration at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Configuration Creation&lt;/h2&gt;
&lt;p&gt;The next thing is to create a configuration. For this we need to have a look at the &lt;code&gt;ConfigurationAdmin&lt;/code&gt; API. In my &lt;a href=&quot;http://blog.vogella.com/2016/09/26/configuring-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Configuring OSGi Declarative Services&lt;/a&gt; blog post I only talked about &lt;code&gt;ConfigurationAdmin#getConfiguration(String, String)&lt;/code&gt;. This is used to get or create the configuration of  a singleton service. For the configuration policy &lt;em&gt;REQUIRE&lt;/em&gt; this means that a single &lt;em&gt;Managed Service&lt;/em&gt; is created once the &lt;code&gt;Configuration&lt;/code&gt; object is used by a requesting bundle. In such a case the &lt;em&gt;Configuration Properties&lt;/em&gt; will contain the property &lt;code&gt;service.pid&lt;/code&gt; with the value of the &lt;strong&gt;configuration PID&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To create and handle multiple service instances via &lt;em&gt;Component Configuration&lt;/em&gt;, a different API needs to be used. For creating new &lt;code&gt;Configuration&lt;/code&gt; objects there is &lt;code&gt;ConfigurationAdmin#createFactoryConfiguration(String, String)&lt;/code&gt;. This way a &lt;em&gt;Managed Service Factory&lt;/em&gt; will be registered by the requesting bundle, which allows to create multiple &lt;em&gt;Component Instances&lt;/em&gt; with different configurations. In this case the &lt;em&gt;Configuration Properties&lt;/em&gt; will contain the property &lt;code&gt;service.factoryPid&lt;/code&gt; with the value of the &lt;strong&gt;configuration PID&lt;/strong&gt; and the &lt;code&gt;service.pid&lt;/code&gt; with a unique value.&lt;/p&gt;
&lt;p&gt;As it is not possible to mix &lt;em&gt;Managed Services&lt;/em&gt; and &lt;em&gt;Managed Service Factories&lt;/em&gt; with the same PID, another method needs to be used to access existing configurations. For this &lt;code&gt;ConfigurationAdmin#listConfigurations(String)&lt;/code&gt; can be used. The parameter can be a filter and the result will be an array of &lt;code&gt;Configuration&lt;/code&gt; objects that match the filter. The filter needs to be an LDAP filter that can test any &lt;em&gt;Configuration Properties&lt;/em&gt;, including &lt;code&gt;service.pid&lt;/code&gt; and &lt;code&gt;service.factoryPid&lt;/code&gt;. The following snippet for example will only return existing &lt;code&gt;Configuration&lt;/code&gt; objects for the &lt;code&gt;Borg&lt;/code&gt; service when it was created via &lt;em&gt;Managed Service Factory&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;this.configAdmin.listConfigurations(
    &quot;(service.factoryPid=org.fipro.oneshot.Borg)&quot;)&lt;/pre&gt;
&lt;p&gt;The parameters of &lt;code&gt;ConfigurationAdmin#getConfiguration(String, String)&lt;/code&gt; and &lt;code&gt;ConfigurationAdmin#createFactoryConfiguration(String, String)&lt;/code&gt; are actually the same. The first parameter is the PID that needs to match the &lt;strong&gt;configuration PID&lt;/strong&gt; of the component, the second is the location binding. It is best practice to use “?” as value for the location parameter.&lt;/p&gt;
&lt;p&gt;Create the following console command in the &lt;code&gt;org.fipro.oneshot.command&lt;/code&gt; bundle:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=assimilate&quot;},
    service=AssimilateCommand.class
)
public class AssimilateCommand {

    @Reference
    ConfigurationAdmin configAdmin;

    public void assimilate(String soldier) {
        assimilate(soldier, null);
    }

    public void assimilate(String soldier, String newName) {
        try {
            // filter to find the Borg created by the
            // Managed Service Factory with the given name
            String filter = &quot;(&amp;amp;(name=&quot; + soldier + &quot;)&quot;
                + &quot;(service.factoryPid=org.fipro.oneshot.Borg))&quot;;
            Configuration[] configurations =
                this.configAdmin.listConfigurations(filter);

            if (configurations == null
                    || configurations.length == 0) {
                //create a new configuration
                Configuration config =
                    this.configAdmin.createFactoryConfiguration(
                        &quot;org.fipro.oneshot.Borg&quot;, &quot;?&quot;);
                Hashtable&amp;lt;String, Object&amp;gt; map = new Hashtable&amp;lt;&amp;gt;();
                if (newName == null) {
                    map.put(&quot;name&quot;, soldier);
                    System.out.println(&quot;Assimilated &quot; + soldier);
                } else {
                    map.put(&quot;name&quot;, newName);
                    System.out.println(&quot;Assimilated &quot; + soldier
                        + &quot; and named it &quot; + newName);
                }
                config.update(map);
            } else if (newName != null) {
                // update the existing configuration
                Configuration config = configurations[0];
                // it is guaranteed by listConfigurations() that
                // only Configuration objects are returned with
                // non-null properties
                Dictionary&amp;lt;String, Object&amp;gt; map =
                    config.getProperties();
                map.put(&quot;name&quot;, newName);
                config.update(map);
                System.out.println(soldier
                    + &quot; already assimilated and renamed to &quot;
                    + newName);
            }
        } catch (IOException | InvalidSyntaxException e1) {
            e1.printStackTrace();
        }
    }
}&lt;/pre&gt;
&lt;p&gt;In the above snippet &lt;em&gt;name&lt;/em&gt; is used as the unique identifier for a created &lt;em&gt;Component Instance&lt;/em&gt;. So the first thing is to check if there is already a &lt;code&gt;Configuration&lt;/code&gt; object in the database for that name. This is done by using &lt;code&gt;ConfigurationAdmin#listConfigurations(String)&lt;/code&gt; with an LDAP filter for the &lt;em&gt;name&lt;/em&gt; and the &lt;em&gt;Managed Service Factory&lt;/em&gt; with &lt;code&gt;service.factoryPid=org.fipro.oneshot.Borg&lt;/code&gt; which is the value of the &lt;strong&gt;configuration PID&lt;/strong&gt; we used for the &lt;code&gt;Borg&lt;/code&gt; service component. If there is no configuration available for a &lt;code&gt;Borg&lt;/code&gt; with the given &lt;em&gt;name&lt;/em&gt;, a new &lt;code&gt;Configuration&lt;/code&gt; object will be created, otherwise the existing one is updated.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
To verify the &lt;em&gt;Configuration Properties&lt;/em&gt; you could extend the &lt;em&gt;activate&lt;/em&gt; method of the &lt;code&gt;Borg&lt;/code&gt; implementation to show them on the console like in the following snippet:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Activate
void activate(BorgConfig config, Map&amp;lt;String, Object&amp;gt; properties) {
    this.name = config.name();
    properties.forEach((k, v) -&amp;gt; {
        System.out.println(k+&quot;=&quot;+v);
    });
}&lt;/pre&gt;
&lt;p&gt;Once a service instance is activated it should output all &lt;em&gt;Configuration Properties&lt;/em&gt;, including the &lt;code&gt;service.pid&lt;/code&gt; and &lt;code&gt;service.factoryPid&lt;/code&gt; for the instance.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
Some more information on that can be found in the &lt;a href=&quot;http://enroute.osgi.org/services/org.osgi.service.cm.html&quot; target=&quot;_blank&quot;&gt;enRoute documentation&lt;/a&gt; and of course in the specification.&lt;/p&gt;
&lt;h2&gt;Service Consumer&lt;/h2&gt;
&lt;p&gt;Finally we add the following &lt;em&gt;execute&lt;/em&gt; command in the &lt;code&gt;org.fipro.oneshot.command&lt;/code&gt; bundle to verify the instance creation:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;@Component(
    property= {
        &quot;osgi.command.scope=fipro&quot;,
        &quot;osgi.command.function=execute&quot;},
    service=ExecuteCommand.class
)
public class ExecuteCommand {

    @Reference(target=&quot;(service.factoryPid=org.fipro.oneshot.Borg)&quot;)
    private volatile List&amp;lt;OneShot&amp;gt; borgs;

    public void execute(String target) {
        for (ListIterator&amp;lt;OneShot&amp;gt; it =
            borgs.listIterator(borgs.size());
                it.hasPrevious(); ) {
                it.previous().shoot(target);
        }
    }
}&lt;/pre&gt;
&lt;p&gt;For simplicity we have a dynamic reference to all available &lt;code&gt;OneShot&lt;/code&gt; service instances that have the &lt;code&gt;service.factoryPid=org.fipro.oneshot.Borg&lt;/code&gt;. As a short reminder on the DS 1.3 field strategy: if the type is a &lt;code&gt;Collection&lt;/code&gt; the cardinality is 0..n, and marking it &lt;code&gt;volatile&lt;/code&gt; specifies it to be a dynamic reluctant reference.&lt;/p&gt;
&lt;p&gt;Starting the application and executing some &lt;em&gt;assimilate&lt;/em&gt; and &lt;em&gt;execute&lt;/em&gt; commands will show something similar to the following on the console:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;g! assimilate Lars
Assimilated Lars
g! assimilate Simon
Assimilated Simon
g! execute Dirk
Borg Lars #1 of 2 took orders and executed Dirk
Borg Simon #2 of 2 took orders and executed Dirk
g! assimilate Lars Locutus
Lars already assimilated and renamed to Locutus
g! execute Dirk
Borg Locutus #1 of 2 took orders and executed Dirk
Borg Simon #2 of 2 took orders and executed Dirk&lt;/pre&gt;
&lt;p&gt;The first two &lt;em&gt;assimilate&lt;/em&gt; calls create new &lt;code&gt;Borg&lt;/code&gt; service instances. This is verified by the &lt;em&gt;execute&lt;/em&gt; command. The following &lt;em&gt;assimilate&lt;/em&gt; call renames an existing &lt;code&gt;Borg&lt;/code&gt;, so no new service instance is created.&lt;/p&gt;
&lt;p&gt;Now that I have learned about &lt;em&gt;Managed Service Factories&lt;/em&gt; and how to use them with DS, I hope I am able to adapt that in the Eclipse Platform. So stay tuned for further DS news!&lt;/p&gt;</description>
	<pubDate>Fri, 24 Feb 2017 07:43:26 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che – Day 2: Generating code</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27853</guid>
	<link>http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we share our experience with extending &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and describe how we have built initial EMF support for the Eclipse Che IDE. Please see the &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;first post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in this series for an overview of our goals. In the &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;last blog post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, we described how to create a custom workspace containing a template modeling project. This template provides a fully configured model. Before looking at any editing support or the creation of custom models, we first have a look at generating code from that template project. This is one of the most crucial requirements of our project, as we want to reuse the existing EMF code generator. So is it possible to reuse this existing Eclipse framework feature in Che?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let’s have a quick look on how the EMF code generator can be triggered. The default way would be to use the UI in the Eclipse IDE. Furthermore, EMF provides a Java API to run the code generation. This sounds appealing, as the Che server component is also written in Java.So we could implement a wrapper service for the Che server, which is triggered by the browser IDE and call the API of EMF to generate the code. But wait, EMF is designed to run in an OSGi runtime environment. Additionally, it uses extension points (at least the package registry). It is actually possible to call the code generator of EMF with plain Java, but we would need to wire things manually. Setting up the classpath without OSGi looks like a nightmare in this scenario. Another disadvantage of that approach is that we would have to deploy the EMF libraries along with our server, which makes an update cumbersome.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Luckily, there is a much simpler way of integrating the existing code generator. The Eclipse Desktop IDE provides a headless application to be executed on the command line. With the following call you can generate the code for the make it happen example.&lt;/span&gt;&lt;/p&gt;



&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family: monospace;&quot;&gt;$ &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;eclipse&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;eclipse \
&lt;span style=&quot;color: #660033;&quot;&gt;-noSplash&lt;/span&gt; \ &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# do not show the eclipse splash screen&lt;/span&gt;
&lt;span style=&quot;color: #660033;&quot;&gt;-data&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;path&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;to&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;data&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;dir&lt;/span&gt; \ &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# the path to be our current project&lt;/span&gt;
&lt;span style=&quot;color: #660033;&quot;&gt;-application&lt;/span&gt; org.eclipse.emf.codegen.ecore.Generator \ &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# the application id to execute&lt;/span&gt;
&lt;span style=&quot;color: #660033;&quot;&gt;-model&lt;/span&gt; \ &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# generate EMF model classes&lt;/span&gt;
&lt;span style=&quot;color: #660033;&quot;&gt;-edit&lt;/span&gt; \ &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# generate EMF edit bundle&lt;/span&gt;
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;path&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;to&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;modelname.genmodel &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# the path to the genmodel file&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So how do we integrate this with Che? The good news is that we can simply deploy Eclipse into a workspace. Workspaces in Che are not only directories hosting code, they also act as a docker container and maycontain tools. So if we install an Eclipse Modeling Tools Edition into our modeling workspace, we should be able to generate code using the EMF Application on the command line.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First we need to get an Eclipse installation into our Che workspace container. As a Che workspace container is based on a Linux image we can use the shell to download and extract the latest Eclipse Modelling Tools. The download link can be fetched from the official downloads page &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/lunar&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (copy the link for Linux 32/64 bit). To access the container shell just click on the “Terminal” tab at the bottom of the screen. The actual shell commands are listed below.&lt;/span&gt;&lt;/p&gt;



&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family: monospace;&quot;&gt;$ &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;su&lt;/span&gt; &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# gain super user privileges (become root)&lt;/span&gt;
$ &lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;cd&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# switch to the root directory&lt;/span&gt;
$ &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;wget&lt;/span&gt; &lt;span style=&quot;color: #800000;&quot;&gt;${Download Link}&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-o&lt;/span&gt; eclipse.tar.gz &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# download eclipse&lt;/span&gt;
$ &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;tar&lt;/span&gt; xfv eclipse.tar.gz &lt;span style=&quot;color: #666666; font-style: italic;&quot;&gt;# extract the downloaded tar.gz file&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Afterwards you can trigger the EMF code generator by typing the following command.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;


&lt;/p&gt;&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family: monospace;&quot;&gt;$ &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;eclipse&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;eclipse \
&lt;span style=&quot;color: #660033;&quot;&gt;-noSplash&lt;/span&gt; \
&lt;span style=&quot;color: #660033;&quot;&gt;-data&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;projects&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;makeithappen \
&lt;span style=&quot;color: #660033;&quot;&gt;-application&lt;/span&gt; org.eclipse.emf.codegen.ecore.Generator \
&lt;span style=&quot;color: #660033;&quot;&gt;-model&lt;/span&gt; \
&lt;span style=&quot;color: #660033;&quot;&gt;-edit&lt;/span&gt; \
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;projects&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;makeithappen&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;org.eclipse.emf.ecp.makeithappen.model&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;model&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;task.genmodel&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;



&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;The following screenshot shows the code generation log on the console. We can then open the generated code using the IDE. That means we have re-used the existing code generator of EMF in Che, just by typing in one line on the console!&lt;/span&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image01.png&quot;&gt;&lt;img alt=&quot;image01&quot; class=&quot;alignnone  wp-image-27854&quot; height=&quot;209&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image01-300x162.png&quot; width=&quot;387&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now that we can trigger the code generator on the command line, let’s make that more convenient for the user. Instead of typing in a complex command, we want to enable the code generation in one click. Therefore, Che allows us to define a “custom command”. To do so, click on the command drop-down in the top right corner of the IDE and select “Edit Commands”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image08.png&quot;&gt;&lt;img alt=&quot;image08&quot; class=&quot;alignnone  wp-image-27855&quot; height=&quot;157&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image08-300x122.png&quot; width=&quot;386&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Then click on the “+” button next to the “Custom” section and fill in the form on the right side (see screenshot). As you can see, the command uses a Che variable for the current project path. However, the last segment of the path to the genmodel is still static.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image07.png&quot;&gt;&lt;img alt=&quot;image07&quot; class=&quot;alignnone  wp-image-27856&quot; height=&quot;216&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/image07-300x190.png&quot; width=&quot;341&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now we can generate the code for the template project with one click. We are reusing the existing EMF code generator. So far, we did not have to write a single line of code. However, there are multiple open issues and things that need to be improved. As an example, we can only trigger the code generation on a fixed project, we still work with a fixed template and we cannot really modify our model (except in plain XML). All those extension will require us to implement extensions for the Che browser IDE and the Che server, which we will begin later in this blog series. In the next part, we will look at creating a custom stack to make the adaptations of this part reproducible. The goal is to have the downloaded Eclipse instance (for the code generation) and the custom command available from scratch. So stay tuned!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;get in contact with us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;
&lt;div class=&quot;row&quot; style=&quot;padding: 0em;&quot;&gt;
&lt;div class=&quot;col2&quot;&gt;&lt;img alt=&quot;_MG_4540b2&quot; class=&quot;alignnone wp-image-23168&quot; height=&quot;86&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/mathias.jpg&quot; width=&quot;129&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;col10&quot;&gt;&lt;strong&gt;Co-Author&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;col10&quot;&gt;Mat Hansen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=EMF+Support+for+Che+%26%238211%3B+Day+2%3A+Generating+code&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&amp;amp;t=EMF+Support+for+Che+%26%238211%3B+Day+2%3A+Generating+code&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/#comments&quot;&gt;1 Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 23 Feb 2017 12:20:51 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: Fuse Tooling for Fuse Integration Services and Teiid Designer on Neon</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/integration-stack-4.4.1.Final.html</guid>
	<link>https://tools.jboss.org/blog/integration-stack-4.4.1.Final.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Try our complete Eclipse-Neon capable, Devstudio 10.2.0 compatible integration tooling.&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jbosstools jbdevstudio blog header&quot; src=&quot;https://tools.jboss.org/blog/images/jbosstools-jbdevstudio-blog-header.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;JBoss Tools Integration Stack 4.4.1.Final / JBoss Developer Studio Integration Stack 10.1.0.GA&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      All of the Integration Stack components have been verified to work with the same dependencies as JBoss Tools 4.4 and Developer Studio 10.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-new-for-this-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-new-for-this-release&quot;&gt;&lt;/a&gt;What’s new for this release?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse Tooling is providing support for FIS 2.0 projects based on the fabric8-maven-plugin workflow. FIS 2.0 spring-boot based projects can be debugged locally and deployed on an OpenShift instance.  Also - this release features the newest production 11.0.1.Final Teiid Designer.  There are no more early access bits for Neon!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;released-tooling-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#released-tooling-highlights&quot;&gt;&lt;/a&gt;Released Tooling Highlights&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jboss-fuse-development-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-fuse-development-highlights&quot;&gt;&lt;/a&gt;JBoss Fuse Development Highlights&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;fuse-tooling-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling-highlights&quot;&gt;&lt;/a&gt;Fuse Tooling Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.1/html/10.1.0.ga_release_notes_and_known_issues/resolved_issues#fuse_tooling_9_1_0_final&quot;&gt;Fuse Tooling 9.1.0.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.1.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;switchyard-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#switchyard-highlights&quot;&gt;&lt;/a&gt;SwitchYard Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.1/html/10.1.0.ga_release_notes_and_known_issues/resolved_issues#switchyard_2_3_0_final_2&quot;&gt;SwitchYard 2.3.0.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.1.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jboss-business-process-and-rules-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-business-process-and-rules-development&quot;&gt;&lt;/a&gt;JBoss Business Process and Rules Development&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;bpmn2-modeler-known-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#bpmn2-modeler-known-issues&quot;&gt;&lt;/a&gt;BPMN2 Modeler Known Issues&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.1/html/10.1.0.ga_release_notes_and_known_issues/known_issues#bpmn2_1_3_2_final_1_3_1_final&quot;&gt;BPMN2 1.3.2.Final Known Issues Section&lt;/a&gt; of the Integration Stack 10.1.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;drools-jbpm6-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#drools-jbpm6-highlights&quot;&gt;&lt;/a&gt;Drools/jBPM6 Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.1/html/10.1.0.ga_release_notes_and_known_issues/known_issues#drools_6_5_1_final&quot;&gt;Drools 6.5.1.Final Known Issues Section&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;data-virtualization-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#data-virtualization-highlights&quot;&gt;&lt;/a&gt;Data Virtualization Highlights&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;teiid-designer-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#teiid-designer-highlights&quot;&gt;&lt;/a&gt;Teiid Designer Highlights&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;See the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_developer_studio_integration_stack/10.1/html/10.1.0.ga_release_notes_and_known_issues/resolved_issues#teiid_designer_11_0_1_final_2&quot;&gt;Teiid Designer 11.0.1.Final Resolved Issues Section&lt;/a&gt; of the Integration Stack 10.1.0.GA release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-an-integration-stack&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-an-integration-stack&quot;&gt;&lt;/a&gt;What’s an Integration Stack?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Red Hat JBoss Developer Studio Integration Stack is a set of Eclipse-based development tools. It further enhances the IDE functionality provided by JBoss Developer Studio, with plug-ins specifically for use when developing for other Red Hat JBoss products.  It’s where the Fuse Tooling, DataVirt Tooling and BRMS tooling is aggregated.  The following frameworks are supported:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-fuse-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-fuse-development&quot;&gt;&lt;/a&gt;JBoss Fuse Development&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/apachecamel.html&quot;&gt;Fuse Tooling&lt;/a&gt; - JBoss Fuse Development provides tooling for Red Hat JBoss Fuse.  It features the latest versions of the Fuse Data Transformation tooling, Fuse Integration Services support, SwitchYard and access to the Fuse SAP Tool Suite.  Read more about &lt;a href=&quot;https://www.openshift.com/container-platform/middleware-services.html&quot;&gt;Microservices Solutions for Integration&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/switchyard.html&quot;&gt;SwitchYard&lt;/a&gt; - A lightweight service delivery framework providing full lifecycle support for developing, deploying, and managing service-oriented applications.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-business-process-and-rules-development-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-business-process-and-rules-development-2&quot;&gt;&lt;/a&gt;JBoss Business Process and Rules Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Business Process and Rules Development plug-ins provide design, debug and testing tooling for developing business processes for Red Hat JBoss BRMS and Red Hat JBoss BPM Suite.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/bpel.html&quot;&gt;BPEL Designer&lt;/a&gt; - Orchestrating your business processes.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/bpmn2.html&quot;&gt;BPMN2 Modeler&lt;/a&gt; - A graphical modeling tool which allows creation and editing of Business Process Modeling Notation diagrams using graphiti.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/drools.html&quot;&gt;Drools&lt;/a&gt; - A Business Logic integration Platform which provides a unified and integrated platform for Rules, Workflow and Event Processing including KIE.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/jbpm.html&quot;&gt;jBPM6&lt;/a&gt; - A flexible Business Process Management (BPM) suite.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-data-virtualization-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-data-virtualization-development&quot;&gt;&lt;/a&gt;JBoss Data Virtualization Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Data Virtualization Development plug-ins provide a graphical interface to manage various aspects of Red Hat JBoss Data Virtualization instances, including the ability to design virtual databases and interact with associated governance repositories.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/teiiddesigner.html&quot;&gt;Teiid Designer&lt;/a&gt; - A visual tool that enables rapid, model-driven definition, integration, management and testing of data services without programming using the Teiid runtime framework.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;jboss-integration-and-soa-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jboss-integration-and-soa-development&quot;&gt;&lt;/a&gt;JBoss Integration and SOA Development&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Integration and SOA Development plug-ins provide tooling for developing, configuring and deploying BRMS, SwitchYard and Fuse applications to Red Hat JBoss Fuse and Fuse Fabric containers, Apache ServiceMix, and Apache Karaf instances.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;All of the Business Process and Rules Development plugins, plus…​&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/apachecamel.html&quot;&gt;Fuse Apache Camel Tooling&lt;/a&gt; - A graphical tool for integrating software components that works with Apache ServiceMix, Apache ActiveMQ, Apache Camel and the FuseSource distributions.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/features/switchyard.html&quot;&gt;SwitchYard&lt;/a&gt; - A lightweight service delivery framework providing full lifecycle support for developing, deploying, and managing service-oriented applications.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;the-jboss-tools-website-features-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#the-jboss-tools-website-features-tab&quot;&gt;&lt;/a&gt;The JBoss Tools website features tab&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Don’t miss the &lt;a href=&quot;https://tools.jboss.org/features&quot;&gt;Features tab&lt;/a&gt; for up to date information on your favorite Integration Stack components.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The easiest way to install the Integration Stack components is through the &lt;a href=&quot;https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?downloadType=distributions&amp;amp;product=jbossdeveloperstudio&amp;amp;version=6.3.0&amp;amp;productChanged=yes&quot;&gt;stand-alone installer&lt;/a&gt;.  If you’re interested specifically in Fuse we have a new all-in-one installer &lt;a href=&quot;https://developers.redhat.com/download-manager/content/origin/files/sha256/1d/1d84b961059a4cca700b3e1bef32c7e0544bae4f0d162f20b196509a79ae52ca/devstudio-integration-stack-10.1.0-fuse-installer-runtime.jar&quot;&gt;JBoss Fuse Tooling + JBoss Fuse/Karaf runtime&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For a complete set of Integration Stack installation instructions, see &lt;a href=&quot;https://access.redhat.com/documentation/en/red-hat-jboss-developer-studio-integration-stack/10.0/paged/installation-guide/&quot;&gt;Integration Stack Installation Instructions&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Try it - you’ll like it!&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Paul Leacu.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 22 Feb 2017 14:22:13 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: Windup Eclipse Plugin has been released!</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/windup_3.0.0_release.html</guid>
	<link>https://tools.jboss.org/blog/windup_3.0.0_release.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are happy to announce the &lt;strong&gt;first&lt;/strong&gt; release of the Windup Eclipse Plugin. It is available now through JBoss Central, and from our update site at &lt;code&gt;&lt;a class=&quot;bare&quot; href=&quot;http://download.jboss.org/jbosstools/neon/stable/updates/windup/composite/&quot;&gt;http://download.jboss.org/jbosstools/neon/stable/updates/windup/composite/&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-s-windup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-s-windup&quot;&gt;&lt;/a&gt;What’s Windup?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Windup is a command line tool used to aid the process of migrating Java applications. Here’s a few examples:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;You want to move your application from one application server to another, for example:&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;WebLogic to EAP&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;WebSphere to EAP&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You want to upgrade from one version of a technology to another, for example:&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Hibernate 3 to Hibernate 4&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;EAP 6 to EAP 7&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;You want to change technologies, for example:&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Seam 2 UI controls to pure JSF 2 UI Controls&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And here’s an example of how you’d run Windup using the CLI:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;$ ./windup --input /path/to/jee-example-app-1.0.0.ear --output /path/to/output --source weblogic --target eap:7&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The output of running Windup from the command line is an HTML report,
      which can then be used to help analyze how much effort the migration
      will take, as well as provide assistance with solving the individual problems.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-do-the-windup-eclipse-plugins-do&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-do-the-windup-eclipse-plugins-do&quot;&gt;&lt;/a&gt;What do the Windup Eclipse plugins do?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As previously mentioned, the output of running Windup from the command line is an HTML report, which is not very useful for the engineer responsible for making the changes in the code.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That’s where the Eclipse plugins come into play. Once you’ve run Windup from within the IDE, all the source files needing to be changed will be automatically marked, and can be easily organized, searched, and in many cases, fixed using quick fixes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let me give you a quick walkthrough of some of the key components. You can find more detailed information &lt;a href=&quot;https://access.redhat.com/documentation/en/red-hat-jboss-migration-toolkit/3.0/single/windup-eclipse-plugin-guide/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;windup-perspective&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#windup-perspective&quot;&gt;&lt;/a&gt;Windup Perspective&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We’ve created a dedicated perspective containing all the the views necessary to use Windup.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Windup Perspective&quot; src=&quot;http://tools.jboss.org/blog/images/windup/perspective.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;run-configuration-dialog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-configuration-dialog&quot;&gt;&lt;/a&gt;Run Configuration Dialog&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Think of this as a GUI for your command line arguments. Instead of needing to dig deep into Windup documentation, and then having to tediously type paths, and other various arguments, this dialog simplifies the process of telling Windup what to analyze and how.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Run Configuration&quot; src=&quot;http://tools.jboss.org/blog/images/windup/run_configuration.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;issue-explorer-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#issue-explorer-view&quot;&gt;&lt;/a&gt;Issue Explorer View&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Issue Explorer gets populated with all the migration issues.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Issue Explorer&quot; src=&quot;http://tools.jboss.org/blog/images/windup/issue_explorer.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;br /&gt;
      &lt;br /&gt;
      You can customize how the issues are organized.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Issue Explorer Grouping&quot; src=&quot;http://tools.jboss.org/blog/images/windup/issue_explorer_grouping.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;br /&gt;
      &lt;br /&gt;
      The context menu is dynamic, and will vary per issue.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Issue Explorer Context Menu&quot; src=&quot;http://tools.jboss.org/blog/images/windup/issue_explorer_context_menu.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;br /&gt;
      &lt;br /&gt;
      Some issues have quick fixes available. Quick fixes can be previewed prior to being applied.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Quick Fix Preview&quot; src=&quot;http://tools.jboss.org/blog/images/windup/quick_fix_preview.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;issue-details-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#issue-details-view&quot;&gt;&lt;/a&gt;Issue Details View&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Issue Details View provides more detailed information about migration issues, for example, hints on how to fix them, external documentation that might help with choosing the best solutions, etc.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Issue Details&quot; src=&quot;http://tools.jboss.org/blog/images/windup/issue_details.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;report-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#report-view&quot;&gt;&lt;/a&gt;Report View&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You may need to refer back to the generated HTML report, and for that reason, we make it readily available here.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Windup Report&quot; src=&quot;http://tools.jboss.org/blog/images/windup/report.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;demo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#demo&quot;&gt;&lt;/a&gt;Demo&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here is a short &lt;a href=&quot;https://www.youtube.com/watch?v=E4RWNZ7PMeM&quot;&gt;video&lt;/a&gt; which demonstrates the basic usage:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;videoblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are trying our best to make the Windup tooling as good as possible. Users&amp;amp;apos feedback is what we are seeking for now. We are looking forward to hearing your comments / remarks!&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have fun!&lt;br /&gt;
      John Steele&lt;br /&gt;
      &lt;a href=&quot;https://github.com/johnsteele/&quot;&gt;github/johnsteele&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 21 Feb 2017 03:14:07 +0000</pubDate>
</item>

</channel>
</rss>
